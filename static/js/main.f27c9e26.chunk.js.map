{"version":3,"sources":["public/images/logo.png","public/images/Group.jpg","public/images/Single-Line-Logo.png","logo.png","components/home.jsx","components/navbar.jsx","components/notfound.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","className","src","logo","alt","group","Component","Navbar","href","Notfound","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,4ECA3CD,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,kC,uLC2B5BC,E,uKArBP,OACI,oCACA,yBAAKC,UAAU,OACX,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAG7C,yBAAKH,UAAU,QACX,yBAAKA,UAAU,SACX,8EAEJ,yBAAKA,UAAU,WACX,8CACA,uIAGJ,yBAAKA,UAAU,QAAQC,IAAKG,Y,GAjBrBC,aCaRC,G,6KAbT,OACE,yBAAKN,UAAU,OACb,4BACE,4BAAI,uBAAGA,UAAU,OAAOO,KAAK,KAAzB,eACJ,4BAAI,uBAAGA,KAAK,SAAR,SACJ,4BAAI,uBAAGA,KAAK,YAAR,YACJ,4BAAI,uBAAGA,KAAK,UAAR,gB,GARKF,cCUNG,G,6KAPP,OACI,yBAAKR,UAAU,OACX,gF,GAJOK,cCmBRI,G,MAfH,WACV,OACE,oCACA,kBAAC,EAAD,MACA,yBAAKT,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjC,kBAAC,IAAD,CAAOY,KAAK,OAAOC,UAAWJ,IAC9B,kBAAC,IAAD,CAAOI,UAAWJ,SCHNK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f27c9e26.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.665e1249.png\";","module.exports = __webpack_public_path__ + \"static/media/Group.43babb6d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Single-Line-Logo.9a490b45.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.665e1249.png\";","import React, { Component } from 'react';\r\nimport logo from '../public/images/logo.png';\r\nimport group from '../public/images/Group.jpg'\r\n\r\nclass Homepage extends Component{\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"App\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </div>\r\n\r\n            <div className=\"post\">\r\n                <div className=\"title\">\r\n                    <h1>Welcome to the Sanpete Javascript Users Group</h1>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <p>Founded in 2020</p>\r\n                    <p>The goal of the SJSUG is to provide Javascript programmers \r\n                        in sanpete county with a valuable community.</p>\r\n                </div>\r\n                <img className=\"image\" src={group}></img>\r\n            </div>\r\n            </>\r\n          );\r\n    }\r\n}\r\nexport default Homepage;","import React, { Component } from 'react';\r\nimport singlelinelogo from '../public/images/Single-Line-Logo.png'\r\nclass Navbar extends Component {\r\n    render() {\r\n      return (\r\n        <div className=\"nav\">\r\n          <ul>\r\n            <li><a className=\"home\" href=\"#\">Sanpete.js</a></li>\r\n            <li><a href=\"#news\">News</a></li>\r\n            <li><a href=\"#contact\">Contact</a></li>\r\n            <li><a href=\"#about\">About</a></li>\r\n        </ul>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport logo from '../logo.png';\r\n\r\nclass Notfound extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>The page you are looking for does not exist</h1>\r\n            </div>\r\n          );\r\n    }\r\n}\r\nexport default Notfound;","import React from 'react';\nimport { Route, Switch } from \"react-router\";\nimport Homepage from './components/home';\nimport Navbar from './components/navbar';\nimport Notfound from './components/notfound'\nimport './App.css';\n\nconst App = () => {\n  return (\n    <>\n    <Navbar/>\n    <div className=\"container\">\n      <Switch>\n        <Route exact path=\"/\" component={Homepage} />\n        <Route path=\"/404\" component={Notfound} />\n        <Route component={Notfound} />\n      </Switch>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}