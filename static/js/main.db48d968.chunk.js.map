{"version":3,"sources":["public/images/logo.png","public/images/Group.jpg","public/images/chart.jpg","logo.png","components/home.jsx","components/schedule.jsx","components/navbar.jsx","components/notfound.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","className","src","logo","alt","group","Component","Schedule","chart","Navbar","to","Notfound","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,sLCsC5BC,E,uKA/BP,OACI,oCACA,yBAAKC,UAAU,OACX,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAG7C,yBAAKH,UAAU,QACf,yBAAKA,UAAU,sBACP,mDAEJ,yBAAKA,UAAU,0BACP,wBAAIA,UAAU,kBAAd,8CAA0E,0BAAMA,UAAU,cAAhB,iBAC1E,sEAIZ,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,sBACX,8EAEJ,yBAAKA,UAAU,WACX,8CACA,wIAGJ,yBAAKA,UAAU,QAAQC,IAAKG,Y,GA3BrBC,a,iBCkBRC,E,uKAlBP,OACI,oCAGA,yBAAKN,UAAU,cACX,yBAAKA,UAAU,sBACX,mDAEJ,yBAAKA,UAAU,0BACP,wBAAIA,UAAU,kBAAd,8CAA0E,0BAAMA,UAAU,cAAhB,iBAC1E,qEAER,yBAAKA,UAAU,QAAQC,IAAKM,Y,GAdrBF,aCaRG,E,uKAZT,OACE,yBAAKR,UAAU,OACb,4BACE,4BAAI,kBAAC,IAAD,CAASA,UAAU,OAAOS,GAAG,KAA7B,eACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,aAAZ,aACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,cAAZ,oB,GAPKJ,aCUNK,G,6KAPP,OACI,yBAAKV,UAAU,OACX,gF,GAJOK,cCqBRM,G,MAhBH,WACV,OACE,oCACA,kBAAC,EAAD,MACA,yBAAKX,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,IAAIC,UAAWf,IACjC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,YAAYC,UAAWR,IACzC,kBAAC,IAAD,CAAOO,KAAK,OAAOC,UAAWJ,IAC9B,kBAAC,IAAD,CAAOI,UAAWJ,SCLNK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.db48d968.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.665e1249.png\";","module.exports = __webpack_public_path__ + \"static/media/Group.2184ecc0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chart.9ca76c1a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.665e1249.png\";","import React, { Component } from 'react';\r\nimport logo from '../public/images/logo.png';\r\nimport group from '../public/images/Group.jpg';\r\n\r\n\r\nclass Homepage extends Component{\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"App\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </div>\r\n\r\n            <div className=\"post\">\r\n            <div className=\"title text-seafoam\">\r\n                    <h1>Our First Meeting.</h1>\r\n                </div>\r\n                <div className=\"content text-dark-grey\">\r\n                        <h2 className=\"text-dark-grey\">Building API's with Express.JS and MySQL - <span className=\"text-black\">chance young</span></h2>\r\n                        <p>april 1st 2020 at 6:00 pm via Skype. </p>                       \r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"post darkgrey text-white\">\r\n                <div className=\"title text-seafoam\">\r\n                    <h1>Welcome to the Sanpete Javascript Users Group</h1>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <p>Founded in 2020</p>\r\n                    <h2>The goal of the SJSUG is to provide Javascript programmers \r\n                        in Sanpete County with a valuable community.</h2>\r\n                </div>\r\n                <img className=\"image\" src={group}></img>\r\n            </div>\r\n            </>\r\n          );\r\n    }\r\n}\r\nexport default Homepage;","import React, { Component } from 'react';\r\nimport chart from '../public/images/chart.jpg';\r\n\r\nclass Schedule extends Component{\r\n    render() {\r\n        return (\r\n            <>\r\n\r\n\r\n            <div className=\"post white\">\r\n                <div className=\"title text-seafoam\">\r\n                    <h1>Our First Meeting.</h1>\r\n                </div>\r\n                <div className=\"content text-dark-grey\">\r\n                        <h2 className=\"text-dark-grey\">Building API's with Express.JS and MySQL - <span className=\"text-black\">chance young</span></h2>\r\n                        <p>april 1st 2020 at 6:00 pm via Skype. </p>                       \r\n                </div>\r\n                <img className=\"image\" src={chart}></img>\r\n            </div>\r\n            </>\r\n          );\r\n    }\r\n}\r\nexport default Schedule;","import React, { Component } from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nclass Navbar extends Component {\r\n    render() {\r\n      return (\r\n        <div className=\"nav\">\r\n          <ul>\r\n            <li><NavLink className=\"home\" to=\"/\">Sanpete.js</NavLink></li>\r\n            <li><NavLink to=\"/schedule\">Schedule</NavLink></li>\r\n            <li><NavLink to=\"/tutorials\">tutorials</NavLink></li>\r\n          </ul>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport logo from '../logo.png';\r\n\r\nclass Notfound extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>The page you are looking for does not exist</h1>\r\n            </div>\r\n          );\r\n    }\r\n}\r\nexport default Notfound;","import React from 'react';\r\nimport { Route, Switch } from \"react-router\";\r\nimport Homepage from './components/home';\r\nimport Schedule from './components/schedule';\r\nimport Navbar from './components/navbar';\r\nimport Notfound from './components/notfound'\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n    <Navbar/>\r\n    <div className=\"container\">\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Homepage} />\r\n        <Route exact path=\"/schedule\" component={Schedule} />\r\n        <Route path=\"/404\" component={Notfound} />\r\n        <Route component={Notfound} />\r\n      </Switch>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}